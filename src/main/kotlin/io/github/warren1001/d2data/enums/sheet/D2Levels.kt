package io.github.warren1001.d2data.enums.sheet

import io.github.warren1001.d2data.properSeparator

enum class D2Levels(header: String, vararg headerHistory: String): D2Header {
	
	NAME("Name"),
	STRING_NAME("*StringName"),
	ID("Id"),
	PAL("Pal"),
	ACT("Act"),
	QUEST_FLAG("QuestFlag"),
	QUEST_FLAG_EX("QuestFlagEx"),
	LAYER("Layer"),
	SIZE_X("SizeX"),
	SIZE_Y("SizeY"),
	SIZE_X_NIGHTMARE("SizeX(N)"),
	SIZE_Y_NIGHTMARE("SizeY(N)"),
	SIZE_X_HELL("SizeX(H)"),
	SIZE_Y_HELL("SizeY(H)"),
	OFFSET_X("OffsetX"),
	OFFSET_Y("OffsetY"),
	DEPEND("Depend"),
	TELEPORT("Teleport"),
	RAIN("Rain"),
	MUD("Mud"),
	NO_PER("NoPer"),
	LOS_DRAW("LOSDraw"),
	FLOOR_FILTER("FloorFilter"),
	BLANK_SCREEN("BlankScreen"),
	DRAW_EDGES("DrawEdges"),
	IS_INSIDE("*IsInside"),
	DRLG_TYPE("DrlgType"),
	LEVEL_TYPE("LevelType"),
	SUB_TYPE("SubType"),
	SUB_THEME("SubTheme"),
	SUB_WAYPOINT("SubWaypoint"),
	SUB_SHRINE("SubShrine"),
	VIS_0("Vis0"),
	VIS_1("Vis1"),
	VIS_2("Vis2"),
	VIS_3("Vis3"),
	VIS_4("Vis4"),
	VIS_5("Vis5"),
	VIS_6("Vis6"),
	VIS_7("Vis7"),
	WARP_0("Warp0"),
	WARP_1("Warp1"),
	WARP_2("Warp2"),
	WARP_3("Warp3"),
	WARP_4("Warp4"),
	WARP_5("Warp5"),
	WARP_6("Warp6"),
	WARP_7("Warp7"),
	INTENSITY("Intensity"),
	RED("Red"),
	GREEN("Green"),
	BLUE("Blue"),
	PORTAL("Portal"),
	POSITION("Position"),
	SAVE_MONSTERS("SaveMonsters"),
	QUEST("Quest"),
	WARP_DIST("WarpDist"),
	MON_LVL("MonLvl"),
	MON_LVL_NIGHTMARE("MonLvl(N)"),
	MON_LVL_HELL("MonLvl(H)"),
	MON_LVL_EX("MonLvlEx"),
	MON_LVL_EX_NIGHTMARE("MonLvlEx(N)"),
	MON_LVL_EX_HELL("MonLvlEx(H)"),
	MON_DEN("MonDen"),
	MON_DEN_NIGHTMARE("MonDen(N)"),
	MON_DEN_HELL("MonDen(H)"),
	MON_U_MIN("MonUMin"),
	MON_U_MAX("MonUMax"),
	MON_U_MIN_NIGHTMARE("MonUMin(N)"),
	MON_U_MAX_NIGHTMARE("MonUMax(N)"),
	MON_U_MIN_HELL("MonUMin(H)"),
	MON_U_MAX_HELL("MonUMax(H)"),
	MON_WNDR("MonWndr"),
	MON_SPC_WALK("MonSpcWalk"),
	NUM_MON("NumMon"),
	MON_1("mon1"),
	MON_2("mon2"),
	MON_3("mon3"),
	MON_4("mon4"),
	MON_5("mon5"),
	MON_6("mon6"),
	MON_7("mon7"),
	MON_8("mon8"),
	MON_9("mon9"),
	MON_10("mon10"),
	MON_11("mon11"),
	MON_12("mon12"),
	MON_13("mon13"),
	MON_14("mon14"),
	MON_15("mon15"),
	MON_16("mon16"),
	MON_17("mon17"),
	MON_18("mon18"),
	MON_19("mon19"),
	MON_20("mon20"),
	MON_21("mon21"),
	MON_22("mon22"),
	MON_23("mon23"),
	MON_24("mon24"),
	MON_25("mon25"),
	RANGEDSPAWN("rangedspawn"),
	NMON_1("nmon1"),
	NMON_2("nmon2"),
	NMON_3("nmon3"),
	NMON_4("nmon4"),
	NMON_5("nmon5"),
	NMON_6("nmon6"),
	NMON_7("nmon7"),
	NMON_8("nmon8"),
	NMON_9("nmon9"),
	NMON_10("nmon10"),
	NMON_11("nmon11"),
	NMON_12("nmon12"),
	NMON_13("nmon13"),
	NMON_14("nmon14"),
	NMON_15("nmon15"),
	NMON_16("nmon16"),
	NMON_17("nmon17"),
	NMON_18("nmon18"),
	NMON_19("nmon19"),
	NMON_20("nmon20"),
	NMON_21("nmon21"),
	NMON_22("nmon22"),
	NMON_23("nmon23"),
	NMON_24("nmon24"),
	NMON_25("nmon25"),
	UMON_1("umon1"),
	UMON_2("umon2"),
	UMON_3("umon3"),
	UMON_4("umon4"),
	UMON_5("umon5"),
	UMON_6("umon6"),
	UMON_7("umon7"),
	UMON_8("umon8"),
	UMON_9("umon9"),
	UMON_10("umon10"),
	UMON_11("umon11"),
	UMON_12("umon12"),
	UMON_13("umon13"),
	UMON_14("umon14"),
	UMON_15("umon15"),
	UMON_16("umon16"),
	UMON_17("umon17"),
	UMON_18("umon18"),
	UMON_19("umon19"),
	UMON_20("umon20"),
	UMON_21("umon21"),
	UMON_22("umon22"),
	UMON_23("umon23"),
	UMON_24("umon24"),
	UMON_25("umon25"),
	CMON_1("cmon1"),
	CMON_2("cmon2"),
	CMON_3("cmon3"),
	CMON_4("cmon4"),
	CPCT_1("cpct1"),
	CPCT_2("cpct2"),
	CPCT_3("cpct3"),
	CPCT_4("cpct4"),
	CAMT_1("camt1"),
	CAMT_2("camt2"),
	CAMT_3("camt3"),
	CAMT_4("camt4"),
	THEMES("Themes"),
	SOUND_ENV("SoundEnv"),
	WAYPOINT("Waypoint"),
	LEVEL_NAME("LevelName"),
	LEVEL_WARP("LevelWarp"),
	LEVEL_ENTRY("LevelEntry"),
	OBJ_GRP_0("ObjGrp0"),
	OBJ_GRP_1("ObjGrp1"),
	OBJ_GRP_2("ObjGrp2"),
	OBJ_GRP_3("ObjGrp3"),
	OBJ_GRP_4("ObjGrp4"),
	OBJ_GRP_5("ObjGrp5"),
	OBJ_GRP_6("ObjGrp6"),
	OBJ_GRP_7("ObjGrp7"),
	OBJ_PRB_0("ObjPrb0"),
	OBJ_PRB_1("ObjPrb1"),
	OBJ_PRB_2("ObjPrb2"),
	OBJ_PRB_3("ObjPrb3"),
	OBJ_PRB_4("ObjPrb4"),
	OBJ_PRB_5("ObjPrb5"),
	OBJ_PRB_6("ObjPrb6"),
	OBJ_PRB_7("ObjPrb7"),
	LEVEL_GROUP("LevelGroup");
	
	override val headerHistory: List<String> = listOf(header, *headerHistory)
	
	companion object {
		val FILE_PATH = "data/global/excel/levels.txt".properSeparator()
		val HEADERS = values().map { it.headerHistory }
		val UNIQUE_HEADER = NAME
		const val HARDCODE = false
		
		val INFO = object: D2SheetInfo {
			override fun getFilePath() = FILE_PATH
			override fun getHeaders() = HEADERS
			override fun getUniqueHeader() = UNIQUE_HEADER
			override fun isHardcode() = HARDCODE
		}
	}
	
}