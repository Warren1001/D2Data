package io.github.warren1001.d2data.enums

enum class D2MonStats(override val header: String): D2Header {
	
	ID("Id"),
	HC_IDX("*hcIdx"),
	BASE_ID("BaseId"),
	NEXT_IN_CLASS("NextInClass"),
	TRANS_LVL("TransLvl"),
	NAME_STR("NameStr"),
	MON_STATS_EX("MonStatsEx"),
	MON_PROP("MonProp"),
	MON_TYPE("MonType"),
	AI("AI"),
	DESC_STR("DescStr"),
	CODE("Code"),
	ENABLED("enabled"),
	RANGED_TYPE("rangedtype"),
	PLACE_SPAWN("placespawn"),
	SPAWN("spawn"),
	SPAWN_X("spawnx"),
	SPAWN_Y("spawny"),
	SPAWN_MODE("spawnmode"),
	MINION_1("minion1"),
	MINION_2("minion2"),
	SET_BOSS("SetBoss"),
	BOSS_XFER("BossXfer"),
	PARTY_MIN("PartyMin"),
	PARTY_MAX("PartyMax"),
	MIN_GRP("MinGrp"),
	MAX_GRP("MaxGrp"),
	SPARSE_POPULATE("sparsePopulate"),
	VELOCITY("Velocity"),
	RUN("Run"),
	RARITY("Rarity"),
	LEVEL("Level"),
	LEVEL_NIGHTMARE("Level(N)"),
	LEVEL_HELL("Level(H)"),
	MON_SOUND("MonSound"),
	U_MON_SOUND("UMonSound"),
	THREAT("threat"),
	AIDEL("aidel"),
	AIDEL_NIGHTMARE("aidel(N)"),
	AIDEL_HELL("aidel(H)"),
	AIDIST("aidist"),
	AIDIST_NIGHTMARE("aidist(N)"),
	AIDIST_HELL("aidist(H)"),
	AIP_1("aip1"),
	AIP_1_NIGHTMARE("aip1(N)"),
	AIP_1_HELL("aip1(H)"),
	AIP_2("aip2"),
	AIP_2_NIGHTMARE("aip2(N)"),
	AIP_2_HELL("aip2(H)"),
	AIP_3("aip3"),
	AIP_3_NIGHTMARE("aip3(N)"),
	AIP_3_HELL("aip3(H)"),
	AIP_4("aip4"),
	AIP_4_NIGHTMARE("aip4(N)"),
	AIP_4_HELL("aip4(H)"),
	AIP_5("aip5"),
	AIP_5_NIGHTMARE("aip5(N)"),
	AIP_5_HELL("aip5(H)"),
	AIP_6("aip6"),
	AIP_6_NIGHTMARE("aip6(N)"),
	AIP_6_HELL("aip6(H)"),
	AIP_7("aip7"),
	AIP_7_NIGHTMARE("aip7(N)"),
	AIP_7_HELL("aip7(H)"),
	AIP_8("aip8"),
	AIP_8_NIGHTMARE("aip8(N)"),
	AIP_8_HELL("aip8(H)"),
	MISS_A_1("MissA1"),
	MISS_A_2("MissA2"),
	MISS_S_1("MissS1"),
	MISS_S_2("MissS2"),
	MISS_S_3("MissS3"),
	MISS_S_4("MissS4"),
	MISS_C("MissC"),
	MISS_SQ("MissSQ"),
	ALIGN("Align"),
	IS_SPAWN("isSpawn"),
	IS_MELEE("isMelee"),
	NPC("npc"),
	INTERACT("interact"),
	INVENTORY("inventory"),
	IN_TOWN("inTown"),
	L_UNDEAD("lUndead"),
	H_UNDEAD("hUndead"),
	DEMON("demon"),
	FLYING("flying"),
	OPENDOORS("opendoors"),
	BOSS("boss"),
	PRIMEEVIL("primeevil"),
	KILLABLE("killable"),
	SWITCHAI("switchai"),
	NO_AURA("noAura"),
	NOMULTISHOT("nomultishot"),
	NEVER_COUNT("neverCount"),
	PET_IGNORE("petIgnore"),
	DEATH_DMG("deathDmg"),
	GENERIC_SPAWN("genericSpawn"),
	ZOO("zoo"),
	CANNOT_DESECRATE("CannotDesecrate"),
	RIGHT_ARM_ITEM_TYPE("rightArmItemType"),
	LEFT_ARM_ITEM_TYPE("leftArmItemType"),
	CAN_NOT_USE_TWO_HANDED_ITEMS("canNotUseTwoHandedItems"),
	SEND_SKILLS("SendSkills"),
	SKILL_1("Skill1"),
	SK_1_MODE("Sk1mode"),
	SK_1_LVL("Sk1lvl"),
	SKILL_2("Skill2"),
	SK_2_MODE("Sk2mode"),
	SK_2_LVL("Sk2lvl"),
	SKILL_3("Skill3"),
	SK_3_MODE("Sk3mode"),
	SK_3_LVL("Sk3lvl"),
	SKILL_4("Skill4"),
	SK_4_MODE("Sk4mode"),
	SK_4_LVL("Sk4lvl"),
	SKILL_5("Skill5"),
	SK_5_MODE("Sk5mode"),
	SK_5_LVL("Sk5lvl"),
	SKILL_6("Skill6"),
	SK_6_MODE("Sk6mode"),
	SK_6_LVL("Sk6lvl"),
	SKILL_7("Skill7"),
	SK_7_MODE("Sk7mode"),
	SK_7_LVL("Sk7lvl"),
	SKILL_8("Skill8"),
	SK_8_MODE("Sk8mode"),
	SK_8_LVL("Sk8lvl"),
	DRAIN("Drain"),
	DRAIN_NIGHTMARE("Drain(N)"),
	DRAIN_HELL("Drain(H)"),
	COLD_EFFECT("coldeffect"),
	COLD_EFFECT_NIGHTMARE("coldeffect(N)"),
	COLD_EFFECT_HELL("coldeffect(H)"),
	RES_DM("ResDm"),
	RES_MA("ResMa"),
	RES_FI("ResFi"),
	RES_LI("ResLi"),
	RES_CO("ResCo"),
	RES_PO("ResPo"),
	RES_DM_NIGHTMARE("ResDm(N)"),
	RES_MA_NIGHTMARE("ResMa(N)"),
	RES_FI_NIGHTMARE("ResFi(N)"),
	RES_LI_NIGHTMARE("ResLi(N)"),
	RES_CO_NIGHTMARE("ResCo(N)"),
	RES_PO_NIGHTMARE("ResPo(N)"),
	RES_DM_HELL("ResDm(H)"),
	RES_MA_HELL("ResMa(H)"),
	RES_FI_HELL("ResFi(H)"),
	RES_LI_HELL("ResLi(H)"),
	RES_CO_HELL("ResCo(H)"),
	RES_PO_HELL("ResPo(H)"),
	DAMAGE_REGEN("DamageRegen"),
	SKILL_DAMAGE("SkillDamage"),
	NO_RATIO("noRatio"),
	SHIELD_BLOCK_OVERRIDE("ShieldBlockOverride"),
	TO_BLOCK("ToBlock"),
	TO_BLOCK_NIGHTMARE("ToBlock(N)"),
	TO_BLOCK_HELL("ToBlock(H)"),
	CRIT("Crit"),
	MIN_HP("minHP"),
	MAX_HP("maxHP"),
	AC("AC"),
	EXP("Exp"),
	A1_MIN_D("A1MinD"),
	A1_MAX_D("A1MaxD"),
	A1_TH("A1TH"),
	A2_MIN_D("A2MinD"),
	A2_MAX_D("A2MaxD"),
	A2_TH("A2TH"),
	S1_MIN_D("S1MinD"),
	S1_MAX_D("S1MaxD"),
	S1_TH("S1TH"),
	MIN_HP_NIGHTMARE("MinHP(N)"),
	MAX_HP_NIGHTMARE("MaxHP(N)"),
	AC_NIGHTMARE("AC(N)"),
	EXP_NIGHTMARE("Exp(N)"),
	A1_MIN_D_NIGHTMARE("A1MinD(N)"),
	A1_MAX_D_NIGHTMARE("A1MaxD(N)"),
	A1_TH_NIGHTMARE("A1TH(N)"),
	A2_MIN_D_NIGHTMARE("A2MinD(N)"),
	A2_MAX_D_NIGHTMARE("A2MaxD(N)"),
	A2_TH_NIGHTMARE("A2TH(N)"),
	S1_MIN_D_NIGHTMARE("S1MinD(N)"),
	S1_MAX_D_NIGHTMARE("S1MaxD(N)"),
	S1_TH_NIGHTMARE("S1TH(N)"),
	MIN_HP_HELL("MinHP(H)"),
	MAX_HP_HELL("MaxHP(H)"),
	AC_HELL("AC(H)"),
	EXP_HELL("Exp(H)"),
	A1_MIN_D_HELL("A1MinD(H)"),
	A1_MAX_D_HELL("A1MaxD(H)"),
	A1_TH_HELL("A1TH(H)"),
	A2_MIN_D_HELL("A2MinD(H)"),
	A2_MAX_D_HELL("A2MaxD(H)"),
	A2_TH_HELL("A2TH(H)"),
	S1_MIN_D_HELL("S1MinD(H)"),
	S1_MAX_D_HELL("S1MaxD(H)"),
	S1_TH_HELL("S1TH(H)"),
	EL1_MODE("El1Mode"),
	EL1_TYPE("El1Type"),
	EL1_PCT("El1Pct"),
	EL1_MIN_D("El1MinD"),
	EL1_MAX_D("El1MaxD"),
	EL1_DUR("El1Dur"),
	EL1_PCT_NIGHTMARE("El1Pct(N)"),
	EL1_MIN_D_NIGHTMARE("El1MinD(N)"),
	EL1_MAX_D_NIGHTMARE("El1MaxD(N)"),
	EL1_DUR_NIGHTMARE("El1Dur(N)"),
	EL1_PCT_HELL("El1Pct(H)"),
	EL1_MIN_D_HELL("El1MinD(H)"),
	EL1_MAX_D_HELL("El1MaxD(H)"),
	EL1_DUR_HELL("El1Dur(H)"),
	EL2_MODE("El2Mode"),
	EL2_TYPE("El2Type"),
	EL2_PCT("El2Pct"),
	EL2_MIN_D("El2MinD"),
	EL2_MAX_D("El2MaxD"),
	EL2_DUR("El2Dur"),
	EL2_PCT_NIGHTMARE("El2Pct(N)"),
	EL2_MIN_D_NIGHTMARE("El2MinD(N)"),
	EL2_MAX_D_NIGHTMARE("El2MaxD(N)"),
	EL2_DUR_NIGHTMARE("El2Dur(N)"),
	EL2_PCT_HELL("El2Pct(H)"),
	EL2_MIN_D_HELL("El2MinD(H)"),
	EL2_MAX_D_HELL("El2MaxD(H)"),
	EL2_DUR_HELL("El2Dur(H)"),
	EL3_MODE("El3Mode"),
	EL3_TYPE("El3Type"),
	EL3_PCT("El3Pct"),
	EL3_MIN_D("El3MinD"),
	EL3_MAX_D("El3MaxD"),
	EL3_DUR("El3Dur"),
	EL3_PCT_NIGHTMARE("El3Pct(N)"),
	EL3_MIN_D_NIGHTMARE("El3MinD(N)"),
	EL3_MAX_D_NIGHTMARE("El3MaxD(N)"),
	EL3_DUR_NIGHTMARE("El3Dur(N)"),
	EL3_PCT_HELL("El3Pct(H)"),
	EL3_MIN_D_HELL("El3MinD(H)"),
	EL3_MAX_D_HELL("El3MaxD(H)"),
	EL3_DUR_HELL("El3Dur(H)"),
	TREASURE_CLASS("TreasureClass"),
	TREASURE_CLASS_CHAMP("TreasureClassChamp"),
	TREASURE_CLASS_UNIQUE("TreasureClassUnique"),
	TREASURE_CLASS_QUEST("TreasureClassQuest"),
	TREASURE_CLASS_DESECRATED("TreasureClassDesecrated"),
	TREASURE_CLASS_DESECRATED_CHAMP("TreasureClassDesecratedChamp"),
	TREASURE_CLASS_DESECRATED_UNIQUE("TreasureClassDesecratedUnique"),
	TREASURE_CLASS_NIGHTMARE("TreasureClass(N)"),
	TREASURE_CLASS_CHAMP_NIGHTMARE("TreasureClassChamp(N)"),
	TREASURE_CLASS_UNIQUE_NIGHTMARE("TreasureClassUnique(N)"),
	TREASURE_CLASS_QUEST_NIGHTMARE("TreasureClassQuest(N)"),
	TREASURE_CLASS_DESECRATED_NIGHTMARE("TreasureClassDesecrated(N)"),
	TREASURE_CLASS_DESECRATED_CHAMP_NIGHTMARE("TreasureClassDesecratedChamp(N)"),
	TREASURE_CLASS_DESECRATED_UNIQUE_NIGHTMARE("TreasureClassDesecratedUnique(N)"),
	TREASURE_CLASS_HELL("TreasureClass(H)"),
	TREASURE_CLASS_CHAMP_HELL("TreasureClassChamp(H)"),
	TREASURE_CLASS_UNIQUE_HELL("TreasureClassUnique(H)"),
	TREASURE_CLASS_QUEST_HELL("TreasureClassQuest(H)"),
	TREASURE_CLASS_DESECRATED_HELL("TreasureClassDesecrated(H)"),
	TREASURE_CLASS_DESECRATED_CHAMP_HELL("TreasureClassDesecratedChamp(H)"),
	TREASURE_CLASS_DESECRATED_UNIQUE_HELL("TreasureClassDesecratedUnique(H)"),
	TC_QUEST_ID("TCQuestId"),
	TC_QUEST_CP("TCQuestCP"),
	SPL_END_DEATH("SplEndDeath"),
	SPL_GET_MODE_CHART("SplGetModeChart"),
	SPL_END_GENERIC("SplEndGeneric"),
	SPL_CLIENT_END("SplClientEnd"),
	EOL("*eol");
	
	companion object {
		const val SHEET_NAME = "monstats"
		val HEADERS = values().map { it.header }
		val UNIQUE_HEADER = ID
		const val HARDCODE = false
		
		val INFO = object: D2SheetInfo {
			override fun getSheetName() = SHEET_NAME
			override fun getHeaders() = HEADERS
			override fun getUniqueHeader() = UNIQUE_HEADER
			override fun isHardcode() = HARDCODE
		}
	}
	
}